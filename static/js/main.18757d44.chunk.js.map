{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","placeholder","onChange","Card","id","name","email","alt","src","CardList","robots","cardComponent","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","SearchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAeeA,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAElB,OACE,6BACE,2BACEC,UAAY,2BACZC,YAAc,gBACdC,SAAYH,MCMLI,EAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACrB,OACE,yBAAKN,UAAY,uDACf,yBAAKO,IAAM,SAASC,IAAG,+BAA4BJ,EAA5B,YACvB,6BACE,gCAAMC,EAAN,KACA,+BAAKC,MCSEG,EAfE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACXC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACrC,OAAQ,kBAAC,EAAD,CACRC,IAAKD,EACLV,GAAMM,EAAOI,GAAGV,GAChBC,KAAMK,EAAOI,GAAGT,KAChBC,MAAOI,EAAOI,GAAGR,WAEnB,OACE,6BACGK,ICHQK,EARA,SAACC,GACd,OACE,yBAAKC,MAAS,CAACC,UAAW,SAASC,OAAQ,kBAAmBC,OAAO,UAClEJ,EAAMK,WCuBEC,E,YAzBb,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,MAAS,CACZC,UAAW,GAHI,E,+EAODC,EAAMC,GACtBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SAEX,iEAIAG,KAAKX,MAAMK,a,GAnBQQ,aCoDZC,G,kBA9Cb,aAAc,IAAD,8BACX,+CAcFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAcD,EAAME,OAAOC,SAd1C,EAAKZ,MAAO,CACVd,OAAQ,GACRwB,YAAc,IAJL,E,iFASQ,IAAD,OAClBG,MAAM,+CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACnB,OAAO+B,S,+BAQ7B,IAAD,EACyBb,KAAKJ,MAA7Bd,EADD,EACCA,OAAQwB,EADT,EACSA,YACVQ,EAAiBhC,EAAOiC,QAAO,SAAAC,GACnC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASZ,EAAYW,kBAGvD,OAAKnC,EAAOqC,OAMR,yBAAK/C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAgB6B,KAAKI,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUtB,OAAQgC,OATxB,8C,GA7BUZ,cCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,EAAD,MACCC,SAASC,eAAe,SDwHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.18757d44.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        className = 'pa2 ma2 bg-lightest-blue'\r\n        placeholder = 'Search Robots'\r\n        onChange = {searchChange}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\n\r\nconst Card = ({id,name,email}) => {\r\n  return (\r\n    <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt = 'robots' src = {`https://robohash.org/${id}?10x10`}/>\r\n      <div>\r\n        <h2> {name} </h2>\r\n        <p> {email}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n  const cardComponent = robots.map((user,i) => {\r\n    return (<Card\r\n    key={i}\r\n    id = {robots[i].id }\r\n    name={robots[i].name}\r\n    email={robots[i].email}/>)\r\n  })\r\n  return (\r\n    <div >\r\n      {cardComponent}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style = {{overflowY: 'scroll',border: '5px solid black', height:'500px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state =  {\r\n      hasError : false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error,info){\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <h1> Oooops... Something Went Wrong  </h1>\r\n      );\r\n    }else {\r\n      return (\r\n        this.props.children\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, {Component} from 'react';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry.js'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state ={\r\n      robots: [],\r\n      SearchField : ''\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users/')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({robots:users}))\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({SearchField : event.target.value})\r\n  }\r\n\r\n\r\n  render() {\r\n    const { robots, SearchField } = this.state;\r\n    const filteredRobots = robots.filter(robot=>{\r\n      return robot.name.toLowerCase().includes(SearchField.toLowerCase())\r\n    })\r\n\r\n    if (!robots.length) {\r\n      return (\r\n        <div> Loading </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className='tc'>\r\n          <h1 className='f2'>ROBOFRIENDS</h1>\r\n          <SearchBox searchChange = {this.onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots}/>\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n  }\r\n\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n//import Card from './Card';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <App/>\n  ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}